services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:14
    container_name: smpp-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: sms_serve
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '5432:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d sms_serve']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - smpp_network_prod

  # Kafka依赖的ZooKeeper服务
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: smpp-zookeeper-prod
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - smpp_network_prod

  # Kafka消息队列服务
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: smpp-kafka-prod
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://123.253.110.98:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # 增加生产环境性能相关配置
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - smpp_network_prod

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: smpp-prometheus-prod
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - smpp_network_prod

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: smpp-grafana-prod
    restart: always
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - smpp_network_prod

networks:
  smpp_network_prod:
    driver: bridge

volumes:
  postgres_data_prod:
  prometheus_data_prod:
  grafana_data_prod: 